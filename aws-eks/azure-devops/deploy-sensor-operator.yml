# Pipeline to Pull Latest Falcon Container Sensor and Push to Your AWS ECR Registry

# Required Variables
# FALCON_SENSOR_TYPE = falcon-sensor or falcon-container
# FALCON_SENSOR_IMAGE_LOCATION = default or ECR
# AWS_REGION
# AWS_ACCESS_KEY_ID
# AWS_SECRET_ACCESS_KEY
# AWS_EKS_CLUSTER_NAME

# Optional Variables
# FALCON_CID
# FALCON_CLIENT_ID
# FALCON_CLIENT_SECRET
# AWS_ECR_REPOSITORY


trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: DockerInstaller@0
  inputs:
    dockerVersion: '17.09.0-ce'
  displayName: 'Install Docker'

- task: KubectlInstaller@0
  inputs:
    kubectlVersion: 'latest'
  displayName: 'Install kubectl'

- bash: |
    export EKS_CLUSTER_DATA=$(aws eks describe-cluster --name $(AWS_EKS_CLUSTER_NAME))
    export EKS_CA_DATA=$(echo $EKS_CLUSTER_DATA | jq -r '.cluster.certificateAuthority')
    export EKS_ENDPOINT=$(echo $EKS_CLUSTER_DATA | jq -r '.cluster.endpoint')
    export EKS_CLUSTER_ARN=$(echo $EKS_CLUSTER_DATA | jq -r '.cluster.arn')
    echo "##vso[task.setvariable variable=EKS_CA_DATA]$EKS_CA_DATA"
    echo "##vso[task.setvariable variable=EKS_ENDPOINT]$EKS_ENDPOINT"
    echo "##vso[task.setvariable variable=EKS_CLUSTER_ARN]$EKS_CLUSTER_ARN"
  env:
    AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
    AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  displayName: 'Get EKS Cluster Info'

- bash: |
    wget https://raw.githubusercontent.com/ryanjpayne/cs-container-security/main/aws-eks/config/kubeconfig -P /tmp/
    wget https://raw.githubusercontent.com/CrowdStrike/falcon-operator/main/deploy/falcon-operator.yaml -P /tmp/    
  displayName: 'Download kubeconfig and Operator Files'

- bash: |
    sed -i "s/[EKS_CA_DATA]/$(EKS_CA_DATA)/" /tmp/kubeconfig
    sed -i "s/[EKS_ENDPOINT]/$(EKS_ENDPOINT)/" /tmp/kubeconfig
    sed -i "s/[EKS_CLUSTER_ARN]/$(EKS_CLUSTER_ARN)/" /tmp/kubeconfig
    sed -i "s/[AWS_REGION]/$(AWS_REGION)/" /tmp/kubeconfig
    cat /tmp/kubeconfig
  displayName: 'Setup kubeconfig'

# Download and setup appropriate Sensor CRD file per variable selections

- bash: |
    wget -O /tmp/sensor-CRD.yml https://raw.githubusercontent.com/ryanjpayne/cs-container-security/main/aws-eks/crd/node-sensor-CRD.yml
    sed -i "s/[FALCON_CLIENT_ID]/$(FALCON_CLIENT_ID)/" /tmp/sensor-CRD.yml
    sed -i "s/[FALCON_CLIENT_SECRET]/$(FALCON_CLIENT_SECRET)/" /tmp/sensor-CRD.yml
  displayName: 'Setup Default Falcon Node Sensor CRD File'
  condition: and(eq(variables.FALCON_SENSOR_TYPE, 'falcon-sensor'), eq(variables.FALCON_SENSOR_IMAGE_LOCATION, 'default'))

- bash: |
    wget -O /tmp/sensor-CRD.yml https://raw.githubusercontent.com/ryanjpayne/cs-container-security/main/aws-eks/crd/node-sensor-ECR-CRD.yml
    sed -i "s/[FALCON_CID]/$(FALCON_CID)/" /tmp/sensor-CRD.yml
    sed -i "s/[AWS_ECR_REPOSITORY]/$(AWS_ECR_REPOSITORY)/" /tmp/sensor-CRD.yml
  displayName: 'Setup ECR Falcon Node Sensor CRD File'
  condition: and(eq(variables.FALCON_SENSOR_TYPE, 'falcon-sensor'), eq(variables.FALCON_SENSOR_IMAGE_LOCATION, 'ECR'))

- bash: |
    wget -O /tmp/sensor-CRD.yml https://raw.githubusercontent.com/ryanjpayne/cs-container-security/main/aws-eks/crd/container-sensor-CRD.yml
    sed -i "s/[FALCON_CLIENT_ID]/$(FALCON_CLIENT_ID)/" /tmp/sensor-CRD.yml
    sed -i "s/[FALCON_CLIENT_SECRET]/$(FALCON_CLIENT_SECRET)/" /tmp/sensor-CRD.yml
  displayName: 'Setup Default Falcon Container Sensor CRD File'
  condition: and(eq(variables.FALCON_SENSOR_TYPE, 'falcon-container'), eq(variables.FALCON_SENSOR_IMAGE_LOCATION, 'default'))
  
- bash: |
    wget -O /tmp/sensor-CRD.yml https://raw.githubusercontent.com/ryanjpayne/cs-container-security/main/aws-eks/crd/container-sensor-ECR-CRD.yml
    sed -i "s/[FALCON_CLIENT_ID]/$(FALCON_CLIENT_ID)/" /tmp/sensor-CRD.yml
    sed -i "s/[FALCON_CLIENT_SECRET]/$(FALCON_CLIENT_SECRET)/" /tmp/sensor-CRD.yml
  displayName: 'Setup ECR Falcon Container Sensor CRD File'
  condition: and(eq(variables.FALCON_SENSOR_TYPE, 'falcon-container'), eq(variables.FALCON_SENSOR_IMAGE_LOCATION, 'ECR'))

- bash: |
    kubectl apply --kubeconfig /tmp/kubeconfig -f /tmp/falcon-operator.yaml
  displayName: 'Install Operator'

# - task: Kubernetes@1
#   displayName: 'Deploy Falcon Operator'
#   inputs:
#     kubernetesServiceEndpoint: $(EKS_ENDPOINT)
#     command: apply
#     useConfigurationFile: true
#     configuration: /tmp/kubeconfig
#     arguments: -f /tmp/falcon-operator.yaml

- bash: |
    kubectl apply --kubeconfig /tmp/kubeconfig -f /tmp/sensor-CRD.yml
  displayName: 'Install Sensor'

# - task: Kubernetes@1
#   displayName: kubectl apply sensor CRD
#   inputs:
#     kubernetesServiceEndpoint: $(EKS_ENDPOINT)
#     command: apply
#     useConfigurationFile: true
#     configuration: /tmp/kubeconfig
#     arguments: -f /tmp/sensor-CRD.yml